schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Channel {
  """
  The address of the deployed channel contract.
  
  """
  id: Bytes!
  """
  Last updated timestamp of the channel.
  
  """
  lastUpdatedTimestamp: BigInt!
  """
  The account that executed the creation of the channel.
  
  """
  creator: Bytes!
  """
  The content creator of the channel.
  
  """
  owner: Bytes!
  """
  The flow rate required to subscribe to this channel.
  
  """
  subscriptionFlowRatePrice: BigInt!
  """
  The percentage of the subscription flow rate that goes to the creator.
  
  """
  creatorSubscriptionPercentage: BigInt!
  """
  Pool address associated with this channel.
  
  """
  poolAddress: Bytes!
  """
  Total number of active subscribers
  
  """
  numberOfSubscribers: Int!
  """
  Total number of stakers
  
  """
  numberOfStakers: Int!
  """
  The total amount of $FAN tokens currently staked in this channel.
  
  """
  currentStaked: BigInt!
  """
  The total amount of $FAN tokens claimed in this channel.
  
  """
  totalClaimed: BigInt!
  """
  Estimated earnings per second per FAN staked.
  Note that this is calculated using a scaling factor. See `utils.ts` and `constants.ts` for more details.
  
  """
  estimatedEarningsPerSecond: BigInt!
  """
  The ratio of subscription income to amount of FAN staked: `totalSubscriptionFlowRate` * SCALING_FACTOR / `currentStaked`.
  Note that this is calculated using a scaling factor. See `utils.ts` and `constants.ts` for more details.
  
  """
  incomeToStakeRatio: BigInt!
  """
  The ratio of FAN staked to subscription income: `currentStaked` * SCALING_FACTOR / `totalSubscriptionFlowRate`.
  Note that this is calculated using a scaling factor. See `utils.ts` and `constants.ts` for more details.
  
  """
  stakeToIncomeRatio: BigInt!
  """
  The cashback flowrate from the pool to all the channel pool members.
  
  """
  totalSubscriptionCashbackFlowRate: BigInt!
  """
  Total subscription cashback streamed to all the channel pool members.
  
  """
  totalSubscriptionCashbackFlowAmount: BigInt!
  """
  The current in flow rate of the channel.
  
  """
  totalSubscriptionFlowRate: BigInt!
  """
  Total subscription inflows streamed to channel.
  
  """
  totalSubscriptionInflowAmount: BigInt!
  """
  The subscribers of this channel.
  
  """
  subscribers(skip: Int = 0, first: Int = 100, orderBy: ChannelMember_orderBy, orderDirection: OrderDirection, where: ChannelMember_filter): [ChannelMember!]!
}

type ChannelMember {
  """
  The concatenated address of the channel and subscriber:
  channel.id.concat(user.id)
  
  """
  id: Bytes!
  """
  The status of the channel member, the possible states are:
  "INACTIVE" | "ACTIVE" | "STOPPED" | "LIQUIDATED"
  
  """
  status: String!
  """
  A boolean indicating whether the user is subscribed to this channel.
  
  """
  isSubscribed: Boolean!
  """
  A boolean indicating whether the user is staked to this channel.
  
  """
  isStaked: Boolean!
  """
  The amount of $FAN tokens currently staked by this user to this channel.
  
  """
  currentStaked: BigInt!
  """
  The total amount of $FAN tokens claimed by this user in this channel.
  
  """
  totalClaimed: BigInt!
  """
  Last updated timestamp of the channel.
  
  """
  lastUpdatedTimestamp: BigInt!
  """
  The timestamp this user claimed for this channel.
  
  """
  lastClaimedTimestamp: BigInt!
  """
  The current outflow rate from the channel subscriber to the channels (excludes external flows).
  
  """
  totalSubscriptionOutflowRate: BigInt!
  """
  Total subscription amount streamed to the channel.
  
  """
  totalSubscriptionOutflowAmount: BigInt!
  """
  The estimated current cashback inflow rate to the user from `channel`.
  This is estimated because it is based on the flowrate from the pool to the user at the
  lastUpdatedTimestamp. This value changes when other users join the pool.
  
  """
  estimatedTotalCashbackFlowRate: BigInt!
  """
  The estimated total cashback amount to the user from `channel`.
  This is estimated because it is based on the `estimatedTotalCashbackRate`.
  
  """
  estimatedTotalCashbackAmount: BigInt!
  """
  The channel that this subscriber is subscribed to.
  
  """
  channel: Channel!
  """
  The subscriber of this channel.
  
  """
  subscriber: User!
}

input ChannelMember_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  status: String
  status_not: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_lte: String
  status_in: [String!]
  status_not_in: [String!]
  status_contains: String
  status_contains_nocase: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  isSubscribed: Boolean
  isSubscribed_not: Boolean
  isSubscribed_in: [Boolean!]
  isSubscribed_not_in: [Boolean!]
  isStaked: Boolean
  isStaked_not: Boolean
  isStaked_in: [Boolean!]
  isStaked_not_in: [Boolean!]
  currentStaked: BigInt
  currentStaked_not: BigInt
  currentStaked_gt: BigInt
  currentStaked_lt: BigInt
  currentStaked_gte: BigInt
  currentStaked_lte: BigInt
  currentStaked_in: [BigInt!]
  currentStaked_not_in: [BigInt!]
  totalClaimed: BigInt
  totalClaimed_not: BigInt
  totalClaimed_gt: BigInt
  totalClaimed_lt: BigInt
  totalClaimed_gte: BigInt
  totalClaimed_lte: BigInt
  totalClaimed_in: [BigInt!]
  totalClaimed_not_in: [BigInt!]
  lastUpdatedTimestamp: BigInt
  lastUpdatedTimestamp_not: BigInt
  lastUpdatedTimestamp_gt: BigInt
  lastUpdatedTimestamp_lt: BigInt
  lastUpdatedTimestamp_gte: BigInt
  lastUpdatedTimestamp_lte: BigInt
  lastUpdatedTimestamp_in: [BigInt!]
  lastUpdatedTimestamp_not_in: [BigInt!]
  lastClaimedTimestamp: BigInt
  lastClaimedTimestamp_not: BigInt
  lastClaimedTimestamp_gt: BigInt
  lastClaimedTimestamp_lt: BigInt
  lastClaimedTimestamp_gte: BigInt
  lastClaimedTimestamp_lte: BigInt
  lastClaimedTimestamp_in: [BigInt!]
  lastClaimedTimestamp_not_in: [BigInt!]
  totalSubscriptionOutflowRate: BigInt
  totalSubscriptionOutflowRate_not: BigInt
  totalSubscriptionOutflowRate_gt: BigInt
  totalSubscriptionOutflowRate_lt: BigInt
  totalSubscriptionOutflowRate_gte: BigInt
  totalSubscriptionOutflowRate_lte: BigInt
  totalSubscriptionOutflowRate_in: [BigInt!]
  totalSubscriptionOutflowRate_not_in: [BigInt!]
  totalSubscriptionOutflowAmount: BigInt
  totalSubscriptionOutflowAmount_not: BigInt
  totalSubscriptionOutflowAmount_gt: BigInt
  totalSubscriptionOutflowAmount_lt: BigInt
  totalSubscriptionOutflowAmount_gte: BigInt
  totalSubscriptionOutflowAmount_lte: BigInt
  totalSubscriptionOutflowAmount_in: [BigInt!]
  totalSubscriptionOutflowAmount_not_in: [BigInt!]
  estimatedTotalCashbackFlowRate: BigInt
  estimatedTotalCashbackFlowRate_not: BigInt
  estimatedTotalCashbackFlowRate_gt: BigInt
  estimatedTotalCashbackFlowRate_lt: BigInt
  estimatedTotalCashbackFlowRate_gte: BigInt
  estimatedTotalCashbackFlowRate_lte: BigInt
  estimatedTotalCashbackFlowRate_in: [BigInt!]
  estimatedTotalCashbackFlowRate_not_in: [BigInt!]
  estimatedTotalCashbackAmount: BigInt
  estimatedTotalCashbackAmount_not: BigInt
  estimatedTotalCashbackAmount_gt: BigInt
  estimatedTotalCashbackAmount_lt: BigInt
  estimatedTotalCashbackAmount_gte: BigInt
  estimatedTotalCashbackAmount_lte: BigInt
  estimatedTotalCashbackAmount_in: [BigInt!]
  estimatedTotalCashbackAmount_not_in: [BigInt!]
  channel: String
  channel_not: String
  channel_gt: String
  channel_lt: String
  channel_gte: String
  channel_lte: String
  channel_in: [String!]
  channel_not_in: [String!]
  channel_contains: String
  channel_contains_nocase: String
  channel_not_contains: String
  channel_not_contains_nocase: String
  channel_starts_with: String
  channel_starts_with_nocase: String
  channel_not_starts_with: String
  channel_not_starts_with_nocase: String
  channel_ends_with: String
  channel_ends_with_nocase: String
  channel_not_ends_with: String
  channel_not_ends_with_nocase: String
  channel_: Channel_filter
  subscriber: String
  subscriber_not: String
  subscriber_gt: String
  subscriber_lt: String
  subscriber_gte: String
  subscriber_lte: String
  subscriber_in: [String!]
  subscriber_not_in: [String!]
  subscriber_contains: String
  subscriber_contains_nocase: String
  subscriber_not_contains: String
  subscriber_not_contains_nocase: String
  subscriber_starts_with: String
  subscriber_starts_with_nocase: String
  subscriber_not_starts_with: String
  subscriber_not_starts_with_nocase: String
  subscriber_ends_with: String
  subscriber_ends_with_nocase: String
  subscriber_not_ends_with: String
  subscriber_not_ends_with_nocase: String
  subscriber_: User_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ChannelMember_filter]
  or: [ChannelMember_filter]
}

enum ChannelMember_orderBy {
  id
  status
  isSubscribed
  isStaked
  currentStaked
  totalClaimed
  lastUpdatedTimestamp
  lastClaimedTimestamp
  totalSubscriptionOutflowRate
  totalSubscriptionOutflowAmount
  estimatedTotalCashbackFlowRate
  estimatedTotalCashbackAmount
  channel
  channel__id
  channel__lastUpdatedTimestamp
  channel__creator
  channel__owner
  channel__subscriptionFlowRatePrice
  channel__creatorSubscriptionPercentage
  channel__poolAddress
  channel__numberOfSubscribers
  channel__numberOfStakers
  channel__currentStaked
  channel__totalClaimed
  channel__estimatedEarningsPerSecond
  channel__incomeToStakeRatio
  channel__stakeToIncomeRatio
  channel__totalSubscriptionCashbackFlowRate
  channel__totalSubscriptionCashbackFlowAmount
  channel__totalSubscriptionFlowRate
  channel__totalSubscriptionInflowAmount
  subscriber
  subscriber__id
  subscriber__currentStaked
  subscriber__totalClaimed
  subscriber__lastUpdatedTimestamp
  subscriber__lastClaimedTimestamp
  subscriber__lastUnstakedTimestamp
  subscriber__numberOfSubscriptions
  subscriber__numberOfStakes
  subscriber__totalSubscriptionOutflowRate
  subscriber__totalSubscriptionOutflowAmount
  subscriber__estimatedTotalCashbackFlowRate
  subscriber__estimatedTotalCashbackAmount
}

input Channel_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  lastUpdatedTimestamp: BigInt
  lastUpdatedTimestamp_not: BigInt
  lastUpdatedTimestamp_gt: BigInt
  lastUpdatedTimestamp_lt: BigInt
  lastUpdatedTimestamp_gte: BigInt
  lastUpdatedTimestamp_lte: BigInt
  lastUpdatedTimestamp_in: [BigInt!]
  lastUpdatedTimestamp_not_in: [BigInt!]
  creator: Bytes
  creator_not: Bytes
  creator_gt: Bytes
  creator_lt: Bytes
  creator_gte: Bytes
  creator_lte: Bytes
  creator_in: [Bytes!]
  creator_not_in: [Bytes!]
  creator_contains: Bytes
  creator_not_contains: Bytes
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  subscriptionFlowRatePrice: BigInt
  subscriptionFlowRatePrice_not: BigInt
  subscriptionFlowRatePrice_gt: BigInt
  subscriptionFlowRatePrice_lt: BigInt
  subscriptionFlowRatePrice_gte: BigInt
  subscriptionFlowRatePrice_lte: BigInt
  subscriptionFlowRatePrice_in: [BigInt!]
  subscriptionFlowRatePrice_not_in: [BigInt!]
  creatorSubscriptionPercentage: BigInt
  creatorSubscriptionPercentage_not: BigInt
  creatorSubscriptionPercentage_gt: BigInt
  creatorSubscriptionPercentage_lt: BigInt
  creatorSubscriptionPercentage_gte: BigInt
  creatorSubscriptionPercentage_lte: BigInt
  creatorSubscriptionPercentage_in: [BigInt!]
  creatorSubscriptionPercentage_not_in: [BigInt!]
  poolAddress: Bytes
  poolAddress_not: Bytes
  poolAddress_gt: Bytes
  poolAddress_lt: Bytes
  poolAddress_gte: Bytes
  poolAddress_lte: Bytes
  poolAddress_in: [Bytes!]
  poolAddress_not_in: [Bytes!]
  poolAddress_contains: Bytes
  poolAddress_not_contains: Bytes
  numberOfSubscribers: Int
  numberOfSubscribers_not: Int
  numberOfSubscribers_gt: Int
  numberOfSubscribers_lt: Int
  numberOfSubscribers_gte: Int
  numberOfSubscribers_lte: Int
  numberOfSubscribers_in: [Int!]
  numberOfSubscribers_not_in: [Int!]
  numberOfStakers: Int
  numberOfStakers_not: Int
  numberOfStakers_gt: Int
  numberOfStakers_lt: Int
  numberOfStakers_gte: Int
  numberOfStakers_lte: Int
  numberOfStakers_in: [Int!]
  numberOfStakers_not_in: [Int!]
  currentStaked: BigInt
  currentStaked_not: BigInt
  currentStaked_gt: BigInt
  currentStaked_lt: BigInt
  currentStaked_gte: BigInt
  currentStaked_lte: BigInt
  currentStaked_in: [BigInt!]
  currentStaked_not_in: [BigInt!]
  totalClaimed: BigInt
  totalClaimed_not: BigInt
  totalClaimed_gt: BigInt
  totalClaimed_lt: BigInt
  totalClaimed_gte: BigInt
  totalClaimed_lte: BigInt
  totalClaimed_in: [BigInt!]
  totalClaimed_not_in: [BigInt!]
  estimatedEarningsPerSecond: BigInt
  estimatedEarningsPerSecond_not: BigInt
  estimatedEarningsPerSecond_gt: BigInt
  estimatedEarningsPerSecond_lt: BigInt
  estimatedEarningsPerSecond_gte: BigInt
  estimatedEarningsPerSecond_lte: BigInt
  estimatedEarningsPerSecond_in: [BigInt!]
  estimatedEarningsPerSecond_not_in: [BigInt!]
  incomeToStakeRatio: BigInt
  incomeToStakeRatio_not: BigInt
  incomeToStakeRatio_gt: BigInt
  incomeToStakeRatio_lt: BigInt
  incomeToStakeRatio_gte: BigInt
  incomeToStakeRatio_lte: BigInt
  incomeToStakeRatio_in: [BigInt!]
  incomeToStakeRatio_not_in: [BigInt!]
  stakeToIncomeRatio: BigInt
  stakeToIncomeRatio_not: BigInt
  stakeToIncomeRatio_gt: BigInt
  stakeToIncomeRatio_lt: BigInt
  stakeToIncomeRatio_gte: BigInt
  stakeToIncomeRatio_lte: BigInt
  stakeToIncomeRatio_in: [BigInt!]
  stakeToIncomeRatio_not_in: [BigInt!]
  totalSubscriptionCashbackFlowRate: BigInt
  totalSubscriptionCashbackFlowRate_not: BigInt
  totalSubscriptionCashbackFlowRate_gt: BigInt
  totalSubscriptionCashbackFlowRate_lt: BigInt
  totalSubscriptionCashbackFlowRate_gte: BigInt
  totalSubscriptionCashbackFlowRate_lte: BigInt
  totalSubscriptionCashbackFlowRate_in: [BigInt!]
  totalSubscriptionCashbackFlowRate_not_in: [BigInt!]
  totalSubscriptionCashbackFlowAmount: BigInt
  totalSubscriptionCashbackFlowAmount_not: BigInt
  totalSubscriptionCashbackFlowAmount_gt: BigInt
  totalSubscriptionCashbackFlowAmount_lt: BigInt
  totalSubscriptionCashbackFlowAmount_gte: BigInt
  totalSubscriptionCashbackFlowAmount_lte: BigInt
  totalSubscriptionCashbackFlowAmount_in: [BigInt!]
  totalSubscriptionCashbackFlowAmount_not_in: [BigInt!]
  totalSubscriptionFlowRate: BigInt
  totalSubscriptionFlowRate_not: BigInt
  totalSubscriptionFlowRate_gt: BigInt
  totalSubscriptionFlowRate_lt: BigInt
  totalSubscriptionFlowRate_gte: BigInt
  totalSubscriptionFlowRate_lte: BigInt
  totalSubscriptionFlowRate_in: [BigInt!]
  totalSubscriptionFlowRate_not_in: [BigInt!]
  totalSubscriptionInflowAmount: BigInt
  totalSubscriptionInflowAmount_not: BigInt
  totalSubscriptionInflowAmount_gt: BigInt
  totalSubscriptionInflowAmount_lt: BigInt
  totalSubscriptionInflowAmount_gte: BigInt
  totalSubscriptionInflowAmount_lte: BigInt
  totalSubscriptionInflowAmount_in: [BigInt!]
  totalSubscriptionInflowAmount_not_in: [BigInt!]
  subscribers_: ChannelMember_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Channel_filter]
  or: [Channel_filter]
}

enum Channel_orderBy {
  id
  lastUpdatedTimestamp
  creator
  owner
  subscriptionFlowRatePrice
  creatorSubscriptionPercentage
  poolAddress
  numberOfSubscribers
  numberOfStakers
  currentStaked
  totalClaimed
  estimatedEarningsPerSecond
  incomeToStakeRatio
  stakeToIncomeRatio
  totalSubscriptionCashbackFlowRate
  totalSubscriptionCashbackFlowAmount
  totalSubscriptionFlowRate
  totalSubscriptionInflowAmount
  subscribers
}

type GlobalData {
  """
  An arbitrary ID for the global data.
  
  """
  id: Bytes!
  """
  Last updated timestamp of the channel.
  
  """
  lastUpdatedTimestamp: BigInt!
  """
  The total amount of tokens staked in all channels.
  
  """
  totalStaked: BigInt!
  """
  The total amount of tokens staked in all channels.
  
  """
  totalClaimed: BigInt!
  """
  The total subscription flow rate of all channels.
  
  """
  totalSubscriptionFlowRate: BigInt!
  """
  The total amount of tokens streamed to all channels.
  
  """
  totalSubscriptionFlowAmount: BigInt!
  """
  The cashback flowrate from the pool to all the channel pool members.
  
  """
  totalSubscriptionCashbackFlowRate: BigInt!
  """
  Total subscription cashback streamed to all the channel pool members.
  
  """
  totalSubscriptionCashbackFlowAmount: BigInt!
  """
  The total number of subscriptions (a single user can have multiple subscriptions to different channels).
  
  """
  totalNumberOfSubscriptions: Int!
  """
  The total number of stakers (a single user can stake in multiple channels).
  
  """
  totalNumberOfStakers: Int!
  """
  The total number of channels/Users.
  
  """
  totalNumberOfChannels: Int!
}

input GlobalData_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  lastUpdatedTimestamp: BigInt
  lastUpdatedTimestamp_not: BigInt
  lastUpdatedTimestamp_gt: BigInt
  lastUpdatedTimestamp_lt: BigInt
  lastUpdatedTimestamp_gte: BigInt
  lastUpdatedTimestamp_lte: BigInt
  lastUpdatedTimestamp_in: [BigInt!]
  lastUpdatedTimestamp_not_in: [BigInt!]
  totalStaked: BigInt
  totalStaked_not: BigInt
  totalStaked_gt: BigInt
  totalStaked_lt: BigInt
  totalStaked_gte: BigInt
  totalStaked_lte: BigInt
  totalStaked_in: [BigInt!]
  totalStaked_not_in: [BigInt!]
  totalClaimed: BigInt
  totalClaimed_not: BigInt
  totalClaimed_gt: BigInt
  totalClaimed_lt: BigInt
  totalClaimed_gte: BigInt
  totalClaimed_lte: BigInt
  totalClaimed_in: [BigInt!]
  totalClaimed_not_in: [BigInt!]
  totalSubscriptionFlowRate: BigInt
  totalSubscriptionFlowRate_not: BigInt
  totalSubscriptionFlowRate_gt: BigInt
  totalSubscriptionFlowRate_lt: BigInt
  totalSubscriptionFlowRate_gte: BigInt
  totalSubscriptionFlowRate_lte: BigInt
  totalSubscriptionFlowRate_in: [BigInt!]
  totalSubscriptionFlowRate_not_in: [BigInt!]
  totalSubscriptionFlowAmount: BigInt
  totalSubscriptionFlowAmount_not: BigInt
  totalSubscriptionFlowAmount_gt: BigInt
  totalSubscriptionFlowAmount_lt: BigInt
  totalSubscriptionFlowAmount_gte: BigInt
  totalSubscriptionFlowAmount_lte: BigInt
  totalSubscriptionFlowAmount_in: [BigInt!]
  totalSubscriptionFlowAmount_not_in: [BigInt!]
  totalSubscriptionCashbackFlowRate: BigInt
  totalSubscriptionCashbackFlowRate_not: BigInt
  totalSubscriptionCashbackFlowRate_gt: BigInt
  totalSubscriptionCashbackFlowRate_lt: BigInt
  totalSubscriptionCashbackFlowRate_gte: BigInt
  totalSubscriptionCashbackFlowRate_lte: BigInt
  totalSubscriptionCashbackFlowRate_in: [BigInt!]
  totalSubscriptionCashbackFlowRate_not_in: [BigInt!]
  totalSubscriptionCashbackFlowAmount: BigInt
  totalSubscriptionCashbackFlowAmount_not: BigInt
  totalSubscriptionCashbackFlowAmount_gt: BigInt
  totalSubscriptionCashbackFlowAmount_lt: BigInt
  totalSubscriptionCashbackFlowAmount_gte: BigInt
  totalSubscriptionCashbackFlowAmount_lte: BigInt
  totalSubscriptionCashbackFlowAmount_in: [BigInt!]
  totalSubscriptionCashbackFlowAmount_not_in: [BigInt!]
  totalNumberOfSubscriptions: Int
  totalNumberOfSubscriptions_not: Int
  totalNumberOfSubscriptions_gt: Int
  totalNumberOfSubscriptions_lt: Int
  totalNumberOfSubscriptions_gte: Int
  totalNumberOfSubscriptions_lte: Int
  totalNumberOfSubscriptions_in: [Int!]
  totalNumberOfSubscriptions_not_in: [Int!]
  totalNumberOfStakers: Int
  totalNumberOfStakers_not: Int
  totalNumberOfStakers_gt: Int
  totalNumberOfStakers_lt: Int
  totalNumberOfStakers_gte: Int
  totalNumberOfStakers_lte: Int
  totalNumberOfStakers_in: [Int!]
  totalNumberOfStakers_not_in: [Int!]
  totalNumberOfChannels: Int
  totalNumberOfChannels_not: Int
  totalNumberOfChannels_gt: Int
  totalNumberOfChannels_lt: Int
  totalNumberOfChannels_gte: Int
  totalNumberOfChannels_lte: Int
  totalNumberOfChannels_in: [Int!]
  totalNumberOfChannels_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GlobalData_filter]
  or: [GlobalData_filter]
}

enum GlobalData_orderBy {
  id
  lastUpdatedTimestamp
  totalStaked
  totalClaimed
  totalSubscriptionFlowRate
  totalSubscriptionFlowAmount
  totalSubscriptionCashbackFlowRate
  totalSubscriptionCashbackFlowAmount
  totalNumberOfSubscriptions
  totalNumberOfStakers
  totalNumberOfChannels
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  channel(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Channel
  channels(
    skip: Int = 0
    first: Int = 100
    orderBy: Channel_orderBy
    orderDirection: OrderDirection
    where: Channel_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Channel!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  channelMember(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ChannelMember
  channelMembers(
    skip: Int = 0
    first: Int = 100
    orderBy: ChannelMember_orderBy
    orderDirection: OrderDirection
    where: ChannelMember_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ChannelMember!]!
  globalData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GlobalData
  globalDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: GlobalData_orderBy
    orderDirection: OrderDirection
    where: GlobalData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GlobalData!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  channel(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Channel
  channels(
    skip: Int = 0
    first: Int = 100
    orderBy: Channel_orderBy
    orderDirection: OrderDirection
    where: Channel_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Channel!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  channelMember(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ChannelMember
  channelMembers(
    skip: Int = 0
    first: Int = 100
    orderBy: ChannelMember_orderBy
    orderDirection: OrderDirection
    where: ChannelMember_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ChannelMember!]!
  globalData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GlobalData
  globalDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: GlobalData_orderBy
    orderDirection: OrderDirection
    where: GlobalData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GlobalData!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type User {
  """
  The address of the user.
  
  """
  id: Bytes!
  """
  The creator channel for this user. Users can only have one creator channel.
  They also do not need to have a channel to stake/subscribe, etc.
  
  """
  userChannel: Channel
  """
  The total amount of $FAN tokens currently staked by this user.
  
  """
  currentStaked: BigInt!
  """
  The total amount of $FAN tokens claimed by this user.
  
  """
  totalClaimed: BigInt!
  """
  Last updated timestamp of the User.
  
  """
  lastUpdatedTimestamp: BigInt!
  """
  Last claimed timestamp.
  
  """
  lastClaimedTimestamp: BigInt!
  """
  The last timestamp the user unstaked.
  
  """
  lastUnstakedTimestamp: BigInt!
  """
  The number of channels the user is subscribed to.
  
  """
  numberOfSubscriptions: Int!
  """
  Total number of channels the user is staked to.
  
  """
  numberOfStakes: Int!
  """
  The current outflow rate from the user to all the channels (excludes external flows).
  
  """
  totalSubscriptionOutflowRate: BigInt!
  """
  Total subscription outflows streamed to different channels.
  
  """
  totalSubscriptionOutflowAmount: BigInt!
  """
  The estimated current cashback inflow rate to the user from all the channels.
  This is estimated because it is based on the flowrate from the pool to the user at the
  lastUpdatedTimestamp. This value changes when other users join the pool.
  
  """
  estimatedTotalCashbackFlowRate: BigInt!
  """
  The estimated total cashback amount to the user from all the channels.
  This is estimated because it is based on the `estimatedTotalCashbackRate`.
  
  """
  estimatedTotalCashbackAmount: BigInt!
  """
  The channels that this user is subscribed to.
  
  """
  channels(skip: Int = 0, first: Int = 100, orderBy: ChannelMember_orderBy, orderDirection: OrderDirection, where: ChannelMember_filter): [ChannelMember!]!
}

input User_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  userChannel: String
  userChannel_not: String
  userChannel_gt: String
  userChannel_lt: String
  userChannel_gte: String
  userChannel_lte: String
  userChannel_in: [String!]
  userChannel_not_in: [String!]
  userChannel_contains: String
  userChannel_contains_nocase: String
  userChannel_not_contains: String
  userChannel_not_contains_nocase: String
  userChannel_starts_with: String
  userChannel_starts_with_nocase: String
  userChannel_not_starts_with: String
  userChannel_not_starts_with_nocase: String
  userChannel_ends_with: String
  userChannel_ends_with_nocase: String
  userChannel_not_ends_with: String
  userChannel_not_ends_with_nocase: String
  userChannel_: Channel_filter
  currentStaked: BigInt
  currentStaked_not: BigInt
  currentStaked_gt: BigInt
  currentStaked_lt: BigInt
  currentStaked_gte: BigInt
  currentStaked_lte: BigInt
  currentStaked_in: [BigInt!]
  currentStaked_not_in: [BigInt!]
  totalClaimed: BigInt
  totalClaimed_not: BigInt
  totalClaimed_gt: BigInt
  totalClaimed_lt: BigInt
  totalClaimed_gte: BigInt
  totalClaimed_lte: BigInt
  totalClaimed_in: [BigInt!]
  totalClaimed_not_in: [BigInt!]
  lastUpdatedTimestamp: BigInt
  lastUpdatedTimestamp_not: BigInt
  lastUpdatedTimestamp_gt: BigInt
  lastUpdatedTimestamp_lt: BigInt
  lastUpdatedTimestamp_gte: BigInt
  lastUpdatedTimestamp_lte: BigInt
  lastUpdatedTimestamp_in: [BigInt!]
  lastUpdatedTimestamp_not_in: [BigInt!]
  lastClaimedTimestamp: BigInt
  lastClaimedTimestamp_not: BigInt
  lastClaimedTimestamp_gt: BigInt
  lastClaimedTimestamp_lt: BigInt
  lastClaimedTimestamp_gte: BigInt
  lastClaimedTimestamp_lte: BigInt
  lastClaimedTimestamp_in: [BigInt!]
  lastClaimedTimestamp_not_in: [BigInt!]
  lastUnstakedTimestamp: BigInt
  lastUnstakedTimestamp_not: BigInt
  lastUnstakedTimestamp_gt: BigInt
  lastUnstakedTimestamp_lt: BigInt
  lastUnstakedTimestamp_gte: BigInt
  lastUnstakedTimestamp_lte: BigInt
  lastUnstakedTimestamp_in: [BigInt!]
  lastUnstakedTimestamp_not_in: [BigInt!]
  numberOfSubscriptions: Int
  numberOfSubscriptions_not: Int
  numberOfSubscriptions_gt: Int
  numberOfSubscriptions_lt: Int
  numberOfSubscriptions_gte: Int
  numberOfSubscriptions_lte: Int
  numberOfSubscriptions_in: [Int!]
  numberOfSubscriptions_not_in: [Int!]
  numberOfStakes: Int
  numberOfStakes_not: Int
  numberOfStakes_gt: Int
  numberOfStakes_lt: Int
  numberOfStakes_gte: Int
  numberOfStakes_lte: Int
  numberOfStakes_in: [Int!]
  numberOfStakes_not_in: [Int!]
  totalSubscriptionOutflowRate: BigInt
  totalSubscriptionOutflowRate_not: BigInt
  totalSubscriptionOutflowRate_gt: BigInt
  totalSubscriptionOutflowRate_lt: BigInt
  totalSubscriptionOutflowRate_gte: BigInt
  totalSubscriptionOutflowRate_lte: BigInt
  totalSubscriptionOutflowRate_in: [BigInt!]
  totalSubscriptionOutflowRate_not_in: [BigInt!]
  totalSubscriptionOutflowAmount: BigInt
  totalSubscriptionOutflowAmount_not: BigInt
  totalSubscriptionOutflowAmount_gt: BigInt
  totalSubscriptionOutflowAmount_lt: BigInt
  totalSubscriptionOutflowAmount_gte: BigInt
  totalSubscriptionOutflowAmount_lte: BigInt
  totalSubscriptionOutflowAmount_in: [BigInt!]
  totalSubscriptionOutflowAmount_not_in: [BigInt!]
  estimatedTotalCashbackFlowRate: BigInt
  estimatedTotalCashbackFlowRate_not: BigInt
  estimatedTotalCashbackFlowRate_gt: BigInt
  estimatedTotalCashbackFlowRate_lt: BigInt
  estimatedTotalCashbackFlowRate_gte: BigInt
  estimatedTotalCashbackFlowRate_lte: BigInt
  estimatedTotalCashbackFlowRate_in: [BigInt!]
  estimatedTotalCashbackFlowRate_not_in: [BigInt!]
  estimatedTotalCashbackAmount: BigInt
  estimatedTotalCashbackAmount_not: BigInt
  estimatedTotalCashbackAmount_gt: BigInt
  estimatedTotalCashbackAmount_lt: BigInt
  estimatedTotalCashbackAmount_gte: BigInt
  estimatedTotalCashbackAmount_lte: BigInt
  estimatedTotalCashbackAmount_in: [BigInt!]
  estimatedTotalCashbackAmount_not_in: [BigInt!]
  channels_: ChannelMember_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
}

enum User_orderBy {
  id
  userChannel
  userChannel__id
  userChannel__lastUpdatedTimestamp
  userChannel__creator
  userChannel__owner
  userChannel__subscriptionFlowRatePrice
  userChannel__creatorSubscriptionPercentage
  userChannel__poolAddress
  userChannel__numberOfSubscribers
  userChannel__numberOfStakers
  userChannel__currentStaked
  userChannel__totalClaimed
  userChannel__estimatedEarningsPerSecond
  userChannel__incomeToStakeRatio
  userChannel__stakeToIncomeRatio
  userChannel__totalSubscriptionCashbackFlowRate
  userChannel__totalSubscriptionCashbackFlowAmount
  userChannel__totalSubscriptionFlowRate
  userChannel__totalSubscriptionInflowAmount
  currentStaked
  totalClaimed
  lastUpdatedTimestamp
  lastClaimedTimestamp
  lastUnstakedTimestamp
  numberOfSubscriptions
  numberOfStakes
  totalSubscriptionOutflowRate
  totalSubscriptionOutflowAmount
  estimatedTotalCashbackFlowRate
  estimatedTotalCashbackAmount
  channels
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}